// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "projects/LDmitryLD/parser/app/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// Search provides a mock function with given fields: query
func (_m *Parser) Search(query string) ([]models.Vacancy, error) {
	ret := _m.Called(query)

	var r0 []models.Vacancy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Vacancy, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Vacancy); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Vacancy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
